// Generated by CoffeeScript 1.3.3
/*
This class is responsible for sending and receiving from the websocket
*/

var Websocket;

Websocket = (function() {

  function Websocket() {
    this._callbacks = {
      onOpen: function() {},
      onReceive: function() {},
      onError: function() {
        return console.error("websocket error occured");
      },
      onClose: function() {
        return console.info("closed websocket");
      }
    };
  }

  Websocket.prototype.connect = function(domain, path, ssl) {
    var Socket, part_url, url,
      _this = this;
    if (domain == null) {
      domain = document.location.host;
    }
    if (path == null) {
      path = "/websocket";
    }
    this.ssl = ssl != null ? ssl : false;
    part_url = domain + path;
    if (this.ssl) {
      url = "wss://" + part_url;
    } else {
      url = "ws://" + part_url;
    }
    Socket = window['MozWebSocket'] || window['WebSocket'];
    try {
      this._connection = new Socket(url);
      this._connection.onopen = function() {
        _this._callbacks.onOpen();
        return window.onbeforeunload = function() {
          return _this.close();
        };
      };
      this._connection.onmessage = function(event) {
        var json, msg;
        msg = event.data;
        json = JSON.parse(msg);
        _this._callbacks.onReceive(json);
        return console.info("Received: " + msg);
      };
      this._connection.onclose = function() {
        return _this._callbacks.onClose();
      };
      return this._connection.onerror = function() {
        return _this._callbacks.onError();
      };
    } catch (error) {
      return console.error("Cant connect to " + url);
    }
  };

  Websocket.prototype.onOpen = function(callback) {
    return this._callbacks.onOpen = callback;
  };

  Websocket.prototype.onReceive = function(callback) {
    return this._callbacks.onReceive = callback;
  };

  Websocket.prototype.onClose = function(callback) {
    return this._callbacks.onClose = callback;
  };

  Websocket.prototype.onError = function(callback) {
    return this._callbacks.onError = callback;
  };

  Websocket.prototype.sendJSON = function(json_object) {
    var msg;
    msg = JSON.stringify(json_object);
    return this.send(msg);
  };

  return Websocket;

})();
