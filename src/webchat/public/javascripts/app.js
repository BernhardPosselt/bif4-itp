// Generated by CoffeeScript 1.3.3
(function() {
  var app, pingTimout,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = angular.module('WebChat', []).config(function($provide) {
    $provide.value('WEBSOCKET_DOMAIN', document.location.host);
    $provide.value('WEBSOCKET_PATH', '/websocket');
    $provide.value('WEBSOCKET_SSL', false);
    $provide.value('PING_TIMEOUT', 5000);
  });

  app.run(function($rootScope) {});

  $(document).ready(function() {
    return SyntaxHighlighter.defaults.collapse = true;
  });

  app = angular.module('WebChat', []).config(function($provide) {
    $provide.value('WEBSOCKET_DOMAIN', document.location.host);
    $provide.value('WEBSOCKET_PATH', '/websocket');
    $provide.value('WEBSOCKET_SSL', false);
    $provide.value('PING_TIMEOUT', 5000);
  });

  app.run(function($rootScope) {});

  $(document).ready(function() {
    return SyntaxHighlighter.defaults.collapse = true;
  });

  angular.module('WebChat').factory('_ActiveChannel', [
    '$rootScope', function($rootScope) {
      var ActiveChannel;
      ActiveChannel = (function() {

        function ActiveChannel() {
          this.activeChannelId = null;
        }

        ActiveChannel.prototype.setActiveChannelId = function(id) {
          this.activeChannelId = id;
          return $rootScope.$broadcast('changed_channel');
        };

        ActiveChannel.prototype.getActiveChannelId = function() {
          return this.activeChannelId;
        };

        return ActiveChannel;

      })();
      return ActiveChannel;
    }
  ]);

  angular.module('WebChat').factory('WebSocketPublisher', [
    '_WebSocketPublisher', function(_WebSocketPublisher) {
      var publisher;
      publisher = new _WebSocketPublisher();
      return publisher;
    }
  ]);

  angular.module('WebChat').factory('ChannelModel', [
    '_ChannelModel', 'WebSocketPublisher', function(_ChannelModel, WebSocketPublisher) {
      var model;
      model = new _ChannelModel();
      WebSocketPublisher.subscribe(model.getModelType(), model);
      return model;
    }
  ]);

  angular.module('WebChat').factory('GroupModel', [
    '_GroupModel', 'WebSocketPublisher', function(_GroupModel, WebSocketPublisher) {
      var model;
      model = new _GroupModel();
      WebSocketPublisher.subscribe(model.getModelType(), model);
      return model;
    }
  ]);

  angular.module('WebChat').factory('UserModel', [
    '_UserModel', 'WebSocketPublisher', function(_UserModel, WebSocketPublisher) {
      var model;
      model = new _UserModel();
      WebSocketPublisher.subscribe(model.getModelType(), model);
      return model;
    }
  ]);

  angular.module('WebChat').factory('FileModel', [
    '_FileModel', 'WebSocketPublisher', function(_FileModel, WebSocketPublisher) {
      var model;
      model = new _FileModel();
      WebSocketPublisher.subscribe(model.getModelType(), model);
      return model;
    }
  ]);

  angular.module('WebChat').factory('MessageModel', [
    '_MessageModel', 'WebSocketPublisher', function(_MessageModel, WebSocketPublisher) {
      var model;
      model = new _MessageModel();
      WebSocketPublisher.subscribe(model.getModelType(), model);
      return model;
    }
  ]);

  angular.module('WebChat').factory('ActiveUser', [
    '_ActiveUser', 'WebSocketPublisher', function(_ActiveUser, WebSocketPublisher) {
      var model;
      model = new _ActiveUser();
      WebSocketPublisher.subscribe(model.getModelType(), model);
      return model;
    }
  ]);

  angular.module('WebChat').factory('ActiveChannel', [
    '_ActiveChannel', function(_ActiveChannel) {
      var model;
      model = new _ActiveChannel();
      return model;
    }
  ]);

  angular.module('WebChat').factory('MimeTypes', [
    '_MimeTypes', function(_MimeTypes) {
      var mimetypes;
      mimetypes = new _MimeTypes();
      return mimetypes;
    }
  ]);

  angular.module('WebChat').factory('Smileys', [
    '_Smileys', function(_Smileys) {
      var smileys;
      smileys = new _Smileys();
      return smileys;
    }
  ]);

  angular.module('WebChat').factory('WebChatWebSocket', [
    '_WebChatWebSocket', 'WEBSOCKET_DOMAIN', 'WEBSOCKET_PATH', 'WEBSOCKET_SSL', 'WebSocketPublisher', 'FileModel', 'MessageModel', 'ActiveUser', 'UserModel', 'ChannelModel', 'GroupModel', function(_WebChatWebSocket, WEBSOCKET_DOMAIN, WEBSOCKET_PATH, WEBSOCKET_SSL, WebSocketPublisher) {
      var socket;
      socket = new _WebChatWebSocket();
      socket.connect(WEBSOCKET_DOMAIN, WEBSOCKET_PATH, WEBSOCKET_SSL);
      socket.onReceive(function(message) {
        return WebSocketPublisher.publish(message.type, message);
      });
      return socket;
    }
  ]);

  angular.module('WebChat').factory('_Smileys', [
    function() {
      var Smileys;
      Smileys = (function() {

        function Smileys() {
          this.path = "/assets/images/smileys/";
          this.smileys = {
            ":)": "080.gif",
            "-_-": "107.gif",
            ":/": "003.gif",
            ":(": "030.gif",
            ":D": "074.gif",
            "xD": "049.gif",
            "XD": "049.gif",
            ";D": "073.gif",
            "&gt;.&lt;": "009.gif",
            "-.-": "064.gif",
            "-.-*": "064.gif",
            ";)": "083.gif",
            ":P": "048.gif",
            "^^": "055.gif",
            "x(": "010.gif",
            "&lt;3": "112.gif",
            ":blush:": "029.gif",
            ":evil:": "002.gif",
            "lol": "015.gif",
            ":'('": "004.gif",
            ":&gt;": "054.gif",
            "8)": "053.gif",
            "Oo": "031.gif",
            "oO": "031.gif"
          };
        }

        Smileys.prototype.getSmiley = function(key) {
          return this.path + this.smileys[key];
        };

        Smileys.prototype.getSmileys = function() {
          return this.smileys;
        };

        return Smileys;

      })();
      return Smileys;
    }
  ]);

  angular.module('WebChat').factory('_ActiveUser', function() {
    var ActiveUser;
    ActiveUser = (function() {

      function ActiveUser() {
        this.id = null;
      }

      ActiveUser.prototype.getModelType = function() {
        return 'activeuser';
      };

      ActiveUser.prototype.handle = function(message) {
        return this.id = message.data.id;
      };

      return ActiveUser;

    })();
    return ActiveUser;
  });

  angular.module('WebChat').factory('_WebSocketPublisher', function() {
    var WebSocketPublisher;
    WebSocketPublisher = (function() {

      function WebSocketPublisher() {
        this.subscriptions = {};
      }

      WebSocketPublisher.prototype.subscribe = function(type, object) {
        var _base;
        (_base = this.subscriptions)[type] || (_base[type] = []);
        return this.subscriptions[type].push(object);
      };

      WebSocketPublisher.prototype.publish = function(type, message) {
        var subscriber, _i, _len, _ref, _results;
        _ref = this.subscriptions[type] || [];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subscriber = _ref[_i];
          _results.push(subscriber.handle(message));
        }
        return _results;
      };

      return WebSocketPublisher;

    })();
    return WebSocketPublisher;
  });

  angular.module('WebChat').factory('_WebChatWebSocket', function() {
    var WebChatWebSocket;
    WebChatWebSocket = (function() {

      function WebChatWebSocket() {
        this._initialized = false;
        this._shelvedQueries = [];
        this._callbacks = {
          onOpen: function() {
            return console.info('websocket is open');
          },
          onReceive: function() {},
          onError: function() {
            return console.error("websocket error occured");
          },
          onClose: function() {
            return console.info("closed websocket");
          }
        };
      }

      WebChatWebSocket.prototype.connect = function(domain, path, ssl) {
        var Socket, protocol, url,
          _this = this;
        if (domain == null) {
          domain = document.location.host;
        }
        if (path == null) {
          path = "/websocket";
        }
        this.ssl = ssl != null ? ssl : false;
        Socket = window['MozWebSocket'] || window['WebSocket'];
        if (this.ssl) {
          protocol = "wss://";
        } else {
          protocol = "ws://";
        }
        url = "" + protocol + domain + path;
        try {
          this._connection = new Socket(url);
          this._connection.onopen = function() {
            _this._callbacks.onOpen();
            window.onbeforeunload = function() {
              return _this.close();
            };
            _this._initialized = true;
            return _this._runShelvedQueries();
          };
          this._connection.onmessage = function(event) {
            var json, msg;
            msg = event.data;
            json = JSON.parse(msg);
            _this._callbacks.onReceive(json);
            console.info("Received: " + msg);
            if (json.type === 'status') {
              if (json.data.level !== 'ok') {
                return console.warn(json.data.msg);
              }
            }
          };
          this._connection.onclose = function() {
            return _this._callbacks.onClose();
          };
          return this._connection.onerror = function() {
            return _this._callbacks.onError();
          };
        } catch (error) {
          return console.error("Cant connect to " + url);
        }
      };

      WebChatWebSocket.prototype._shelveMessage = function(msg) {
        console.info('saving message to send on connect: ' + msg);
        return this._shelvedQueries.push(msg);
      };

      WebChatWebSocket.prototype._runShelvedQueries = function() {
        var query, _i, _len, _ref;
        _ref = this._shelvedQueries;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          query = _ref[_i];
          this.send(query);
        }
        return this._shelvedQueries = [];
      };

      WebChatWebSocket.prototype.onOpen = function(callback) {
        return this._callbacks.onOpen = callback;
      };

      WebChatWebSocket.prototype.onReceive = function(callback) {
        return this._callbacks.onReceive = callback;
      };

      WebChatWebSocket.prototype.onClose = function(callback) {
        return this._callbacks.onClose = callback;
      };

      WebChatWebSocket.prototype.onError = function(callback) {
        return this._callbacks.onError = callback;
      };

      WebChatWebSocket.prototype.send = function(msg) {
        if (!this._initialized) {
          return this._shelveMessage(msg);
        } else {
          this._connection.send(msg);
          return console.info("Sending " + msg);
        }
      };

      WebChatWebSocket.prototype.sendJSON = function(json_object) {
        var msg;
        msg = JSON.stringify(json_object);
        return this.send(msg);
      };

      return WebChatWebSocket;

    })();
    return WebChatWebSocket;
  });

  angular.module('WebChat').factory('_FileModel', [
    '_Model', function(_Model) {
      var FileModel;
      FileModel = (function(_super) {

        __extends(FileModel, _super);

        function FileModel() {
          FileModel.__super__.constructor.call(this, 'file');
        }

        FileModel.prototype.create = function(file) {
          var _this = this;
          file.getSize = function() {
            return _this.kbToHumanReadable(file.size, 1);
          };
          return FileModel.__super__.create.call(this, file);
        };

        FileModel.prototype.kbToHumanReadable = function(bytes, precision) {
          var gigabyte, kilobyte, megabyte, terabyte;
          kilobyte = 1024;
          megabyte = kilobyte * 1024;
          gigabyte = megabyte * 1024;
          terabyte = gigabyte * 1024;
          if (bytes >= kilobyte && bytes < megabyte) {
            return (bytes / kilobyte).toFixed(precision) + ' KB';
          }
          if (bytes >= megabyte && bytes < gigabyte) {
            return (bytes / megabyte).toFixed(precision) + ' MB';
          } else if (bytes >= gigabyte && bytes < terabyte) {
            return (bytes / gigabyte).toFixed(precision) + ' GB';
          } else if (bytes >= terabyte) {
            return (bytes / terabyte).toFixed(precision) + ' TB';
          } else {
            return bytes + ' B';
          }
        };

        return FileModel;

      })(_Model);
      return FileModel;
    }
  ]);

  angular.module('WebChat').factory('_GroupModel', [
    '_Model', function(_Model) {
      var GroupModel;
      GroupModel = (function(_super) {

        __extends(GroupModel, _super);

        function GroupModel() {
          GroupModel.__super__.constructor.call(this, 'group');
        }

        return GroupModel;

      })(_Model);
      return GroupModel;
    }
  ]);

  angular.module('WebChat').factory('ChannelMessageCache', function() {
    var ChannelMessageCache;
    ChannelMessageCache = (function() {

      function ChannelMessageCache() {
        this.channels = {};
        this.earliestMessage = {};
      }

      ChannelMessageCache.prototype.registerChannelMessage = function(item) {
        var channel;
        channel = this.getChannelById(item.channel_id);
        channel.push(item);
        if (this.earliestMessage[item.channel_id] !== void 0) {
          if (this.earliestMessage[item.channel_id].date > item.date) {
            return this.earliestMessage[item.channel_id] = item;
          }
        } else {
          return this.earliestMessage[item.channel_id] = item;
        }
      };

      ChannelMessageCache.prototype.getEarliestMessage = function(channelId) {
        return this.earliestMessage[channelId];
      };

      ChannelMessageCache.prototype.getLastMessage = function(channelId) {
        var channel;
        channel = this.getChannelById(channelId);
        if (channel.length === 0) {
          return null;
        } else {
          return channel[channel.length - 1];
        }
      };

      ChannelMessageCache.prototype.getChannelById = function(channelId) {
        if (this.channels[channelId] === void 0) {
          this.channels[channelId] = [];
        }
        return this.channels[channelId];
      };

      return ChannelMessageCache;

    })();
    return new ChannelMessageCache();
  });

  angular.module('WebChat').factory('_UserModel', [
    '_Model', function(_Model) {
      var UserModel;
      UserModel = (function(_super) {

        __extends(UserModel, _super);

        function UserModel() {
          UserModel.__super__.constructor.call(this, 'user');
        }

        UserModel.prototype.create = function(user) {
          return UserModel.__super__.create.call(this, this.enhance(user));
        };

        UserModel.prototype.update = function(user) {
          return UserModel.__super__.update.call(this, this.enhance(user));
        };

        UserModel.prototype.enhance = function(user) {
          user.getFullName = function() {
            return this.firstname + " " + this.lastname;
          };
          return user;
        };

        return UserModel;

      })(_Model);
      return UserModel;
    }
  ]);

  angular.module('WebChat').factory('_MessageModel', [
    '_Model', 'Smileys', 'UserModel', 'ActiveUser', 'ChannelMessageCache', function(_Model, Smileys, UserModel, ActiveUser, ChannelMessageCache) {
      var MessageModel;
      MessageModel = (function(_super) {

        __extends(MessageModel, _super);

        function MessageModel() {
          MessageModel.__super__.constructor.call(this, 'message');
          this.channelCache = ChannelMessageCache;
          this.lastShownTimestamp = {};
        }

        MessageModel.prototype.create = function(item) {
          return MessageModel.__super__.create.call(this, this.enhance(item));
        };

        MessageModel.prototype.update = function(item) {
          return MessageModel.__super__.update.call(this, this.enhance(item));
        };

        MessageModel.prototype["delete"] = function(item) {
          return MessageModel.__super__["delete"].call(this, item);
        };

        MessageModel.prototype.enhance = function(item) {
          var highlightName, lastMsg, minuteBefore, minuteNow, minutesPassed, user;
          lastMsg = this.channelCache.getLastMessage(item.channel_id);
          if (lastMsg === null) {
            item.showDate = true;
            item.color = 0;
            this.lastShownTimestamp[item.channel_id] = item.date;
          } else {
            if (lastMsg.owner_id !== item.owner_id) {
              item.color = (lastMsg.color + 1) % 2;
            } else {
              item.color = lastMsg.color;
            }
            minuteNow = new Date(item.date);
            minuteBefore = new Date(this.lastShownTimestamp[item.channel_id]);
            minutesPassed = (item.date - this.lastShownTimestamp[item.channel_id]) / 60000;
            if (minutesPassed >= 1 || minuteNow.getMinutes() !== minuteBefore.getMinutes()) {
              item.showDate = true;
              this.lastShownTimestamp[item.channel_id] = item.date;
            } else {
              item.showDate = false;
            }
          }
          this.channelCache.registerChannelMessage(item);
          if (item.type === 'text') {
            user = UserModel.getItemById(ActiveUser.id);
            highlightName = user.firstname + user.lastname;
            if (item.message.indexOf(highlightName) !== -1) {
              item.highlighted = true;
              document.getElementById('sounds').play();
            } else {
              item.highlighted = false;
            }
            item.message = this.cleanXSS(item.message);
            item.message = this.sugarText(item.message);
            item.message = this.convertNewLines(item.message);
          }
          return item;
        };

        MessageModel.prototype.cleanXSS = function(text) {
          return $('<div>').text(text).html();
        };

        MessageModel.prototype.sugarText = function(msg) {
          var break_line_regex, end_line_regex, img, key, middle_line_regex, new_line_regex, pic, pic_regex, pictures, smile, smileys, start_line_regex, yt_regex, _i, _len, _ref;
          msg = this.createLinks(msg);
          smileys = Smileys;
          _ref = smileys.getSmileys();
          for (key in _ref) {
            smile = _ref[key];
            img = '<img width="50" height="50" alt="' + key + '" src="' + smileys.getSmiley(key) + '" />';
            middle_line_regex = new RegExp("(" + this.escapeForRegex(key) + ")([\.\?!,;]*) ", "g");
            msg = msg.replace(middle_line_regex, " " + img + "$2 ");
            break_line_regex = new RegExp(this.escapeForRegex(key) + "([\.\?!,;]*)<br", "g");
            msg = msg.replace(break_line_regex, img + '$1<br');
            new_line_regex = new RegExp(this.escapeForRegex(key) + "([\.\?!,;]*)\\n", "g");
            msg = msg.replace(new_line_regex, img + '$1\n');
            end_line_regex = new RegExp("(.*)" + this.escapeForRegex(key) + "([\.\?!,;]*)$", "g");
            msg = msg.replace(end_line_regex, "$1" + img + "$2");
            start_line_regex = new RegExp("^" + this.escapeForRegex(key) + "([\.\?!,;]*)(.*)$", "g");
            msg = msg.replace(start_line_regex, img + "$1$2");
          }
          pictures = ["png", "jpg", "jpeg", "gif"];
          for (_i = 0, _len = pictures.length; _i < _len; _i++) {
            pic = pictures[_i];
            pic_regex = new RegExp('<a href="(.*\.' + this.escapeForRegex(pic) + ')">(.*)<\/a>', "gim");
            msg = msg.replace(pic_regex, '<br/><a href="$1"><img alt="$1" src="$1" /></a><br/>');
          }
          yt_regex = /<a href=".*youtube.com\/watch\?v=([0-9a-zA-Z_-]{11}).*">.*<\/a>/gi;
          msg = msg.replace(yt_regex, '<br/><iframe width="560" height="315" src="http://www.youtube.com/embed/$1" frameborder="0" allowfullscreen></iframe><br/>');
          return msg;
        };

        MessageModel.prototype.createLinks = function(msg) {
          var email_regex, pseudo_url_regex, url_regex;
          url_regex = /\b((?:https?|ftp):\/\/[a-z0-9+&@#\/%?=~_|!:,.;-]*[a-z0-9+&@#\/%=~_|-])/gi;
          pseudo_url_regex = /(^|[^\/])(www\.[\S]+(\b|$))/gi;
          email_regex = /\w+@[a-zA-Z_]+?(?:\.[a-zA-Z]{2,6})+/gi;
          msg = msg.replace(url_regex, '<a href="$1">$1</a>');
          msg = msg.replace(pseudo_url_regex, '$1<a target="_blank" href="http://$2">$2</a>');
          msg = msg.replace(email_regex, '<a href="mailto:$&">$&</a>');
          return msg;
        };

        MessageModel.prototype.escapeForRegex = function(text) {
          return (text + '').replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
        };

        MessageModel.prototype.convertNewLines = function(text) {
          return text.replace('\n', '<br />');
        };

        return MessageModel;

      })(_Model);
      return MessageModel;
    }
  ]);

  angular.module('WebChat').factory('_ChannelModel', [
    '_Model', function(_Model) {
      var ChannelModel;
      ChannelModel = (function(_super) {

        __extends(ChannelModel, _super);

        function ChannelModel() {
          ChannelModel.__super__.constructor.call(this, 'channel');
        }

        ChannelModel.prototype.create = function(item) {
          return ChannelModel.__super__.create.call(this, this.enhance(item));
        };

        ChannelModel.prototype.update = function(item) {
          return ChannelModel.__super__.update.call(this, this.enhance(item));
        };

        ChannelModel.prototype.enhance = function(item) {
          item.autoScroll = true;
          item.isUserMod = function(userId) {
            var id, _i, _len, _ref;
            _ref = this.mod;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              if (id === userId) {
                return true;
              }
            }
            return false;
          };
          return item;
        };

        return ChannelModel;

      })(_Model);
      return ChannelModel;
    }
  ]);

  angular.module('WebChat').factory('_Model', [
    '$rootScope', function($rootScope) {
      var Model;
      Model = (function() {

        function _Class(modelType) {
          this.modelType = modelType;
          this.items = [];
          this.hashMap = {};
        }

        _Class.prototype.handle = function(message) {
          var _this = this;
          return $rootScope.$apply(function() {
            switch (message.action) {
              case 'create':
                return _this.create(message.data);
              case 'update':
                return _this.update(message.data);
              case 'delete':
                return _this["delete"](message.data);
            }
          });
        };

        _Class.prototype.create = function(item) {
          if (this.hashMap[item.id] !== void 0) {
            return this.update(item);
          } else {
            this.hashMap[item.id] = item;
            return this.items.push(item);
          }
        };

        _Class.prototype.update = function(item) {
          var key, updatedItem, value, _results;
          updatedItem = this.hashMap[item.id];
          _results = [];
          for (key in item) {
            value = item[key];
            if (key !== 'id') {
              _results.push(updatedItem[key] = value);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        _Class.prototype["delete"] = function(removedItem) {
          var counter, item, removeItemId, _i, _len, _ref;
          removeItemId = -1;
          _ref = this.items;
          for (counter = _i = 0, _len = _ref.length; _i < _len; counter = ++_i) {
            item = _ref[counter];
            if (item.id === removedItem.id) {
              removeItemId = counter;
            }
          }
          if (removeItemId >= 0) {
            this.items.splice(removeItemId, 1);
            return delete this.hashMap[removedItem.id];
          }
        };

        _Class.prototype.getItemById = function(id) {
          return this.hashMap[id];
        };

        _Class.prototype.getItems = function() {
          return this.items;
        };

        _Class.prototype.getModelType = function() {
          return this.modelType;
        };

        return _Class;

      })();
      return Model;
    }
  ]);

  angular.module('WebChat').factory('_MimeTypes', function() {
    var MimeTypes;
    MimeTypes = (function() {

      function MimeTypes(path) {
        this.path = path != null ? path : "/assets/images/mimetypes/";
      }

      MimeTypes.prototype.getIconPath = function(key) {
        var fullPath;
        key = key.replace('/', '-');
        fullPath = this.path + key + '.png';
        return fullPath;
      };

      return MimeTypes;

    })();
    return MimeTypes;
  });

  angular.module('WebChat').factory('_InviteUserMessage', [
    '_Message', function(_Message) {
      var InviteUserMessage;
      InviteUserMessage = (function(_super) {

        __extends(InviteUserMessage, _super);

        function InviteUserMessage(userId, channelId, value) {
          this.userId = userId;
          this.channelId = channelId;
          this.value = value;
          InviteUserMessage.__super__.constructor.call(this, 'inviteuser');
        }

        InviteUserMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.channelId,
            users: this.userId,
            value: this.value
          };
          return InviteUserMessage.__super__.serialize.call(this, data);
        };

        return InviteUserMessage;

      })(_Message);
      return InviteUserMessage;
    }
  ]);

  angular.module('WebChat').factory('_PingMessage', [
    '_Message', function(_Message) {
      var PingMessage;
      PingMessage = (function(_super) {

        __extends(PingMessage, _super);

        function PingMessage() {
          PingMessage.__super__.constructor.call(this, 'ping');
        }

        PingMessage.prototype.serialize = function() {
          var data;
          data = {};
          return PingMessage.__super__.serialize.call(this, data);
        };

        return PingMessage;

      })(_Message);
      return PingMessage;
    }
  ]);

  angular.module('WebChat').factory('_ModUserMessage', [
    '_Message', function(_Message) {
      var ModUserMessage;
      ModUserMessage = (function(_super) {

        __extends(ModUserMessage, _super);

        function ModUserMessage(userId, channelId, value) {
          this.userId = userId;
          this.channelId = channelId;
          this.value = value;
          ModUserMessage.__super__.constructor.call(this, 'moduser');
        }

        ModUserMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.channelId,
            users: this.userId,
            value: this.value
          };
          return ModUserMessage.__super__.serialize.call(this, data);
        };

        return ModUserMessage;

      })(_Message);
      return ModUserMessage;
    }
  ]);

  angular.module('WebChat').factory('_LoadMessages', [
    '_Message', function(_Message) {
      var LoadMessages;
      LoadMessages = (function(_super) {

        __extends(LoadMessages, _super);

        function LoadMessages(channelId, messageId, earliestTimestamp) {
          this.channelId = channelId;
          this.messageId = messageId;
          this.earliestTimestamp = earliestTimestamp;
          LoadMessages.__super__.constructor.call(this, 'loadmessages');
        }

        LoadMessages.prototype.serialize = function() {
          var data;
          data = {
            channel_id: this.channelId,
            message_id: this.messageId,
            earliest_timestamp: this.earliestTimestamp
          };
          return LoadMessages.__super__.serialize.call(this, data);
        };

        return LoadMessages;

      })(_Message);
      return LoadMessages;
    }
  ]);

  angular.module('WebChat').factory('_ReadonlyUserMessage', [
    '_Message', function(_Message) {
      var ReadonlyUserMessage;
      ReadonlyUserMessage = (function(_super) {

        __extends(ReadonlyUserMessage, _super);

        function ReadonlyUserMessage(userId, channelId, value) {
          this.userId = userId;
          this.channelId = channelId;
          this.value = value;
          ReadonlyUserMessage.__super__.constructor.call(this, 'readonlyuser');
        }

        ReadonlyUserMessage.prototype.serialize = function() {
          var data;
          data = {
            channel_id: this.channelId,
            user_id: this.userId,
            value: this.value
          };
          return ReadonlyUserMessage.__super__.serialize.call(this, data);
        };

        return ReadonlyUserMessage;

      })(_Message);
      return ReadonlyUserMessage;
    }
  ]);

  angular.module('WebChat').factory('_CloseChannelMessage', [
    '_Message', function(_Message) {
      var CloseChannelMessage;
      CloseChannelMessage = (function(_super) {

        __extends(CloseChannelMessage, _super);

        function CloseChannelMessage(id) {
          this.id = id;
          CloseChannelMessage.__super__.constructor.call(this, 'channelclose');
        }

        CloseChannelMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.id
          };
          return CloseChannelMessage.__super__.serialize.call(this, data);
        };

        return CloseChannelMessage;

      })(_Message);
      return CloseChannelMessage;
    }
  ]);

  angular.module('WebChat').factory('_EditProfileMessage', [
    '_Message', function(_Message) {
      var EditProfileMessage;
      EditProfileMessage = (function(_super) {

        __extends(EditProfileMessage, _super);

        function EditProfileMessage(id, username, prename, lastname, password, email) {
          this.id = id;
          this.username = username;
          this.prename = prename;
          this.lastname = lastname;
          this.password = password;
          this.email = email;
          EditProfileMessage.__super__.constructor.call(this, 'profileupdate');
        }

        EditProfileMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.id,
            username: this.username,
            prename: this.prename,
            lastname: this.lastname,
            password: this.password,
            email: this.email
          };
          return EditProfileMessage.__super__.serialize.call(this, data);
        };

        return EditProfileMessage;

      })(_Message);
      return EditProfileMessage;
    }
  ]);

  angular.module('WebChat').factory('_ChangeChannelNameMessage', [
    '_Message', function(_Message) {
      var ChangeChannelNameMessage;
      ChangeChannelNameMessage = (function(_super) {

        __extends(ChangeChannelNameMessage, _super);

        function ChangeChannelNameMessage(id, name) {
          this.id = id;
          this.name = name;
          ChangeChannelNameMessage.__super__.constructor.call(this, 'channelname');
        }

        ChangeChannelNameMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.id,
            name: this.name
          };
          return ChangeChannelNameMessage.__super__.serialize.call(this, data);
        };

        return ChangeChannelNameMessage;

      })(_Message);
      return ChangeChannelNameMessage;
    }
  ]);

  angular.module('WebChat').factory('_NewChannelMessage', [
    '_Message', function(_Message) {
      var NewChannelMessage;
      NewChannelMessage = (function(_super) {

        __extends(NewChannelMessage, _super);

        function NewChannelMessage(name, topic, isPublic) {
          this.name = name;
          this.topic = topic;
          this.isPublic = isPublic;
          NewChannelMessage.__super__.constructor.call(this, 'newchannel');
        }

        NewChannelMessage.prototype.serialize = function() {
          var data;
          data = {
            name: this.name,
            topic: this.topic,
            is_public: this.isPublic
          };
          return NewChannelMessage.__super__.serialize.call(this, data);
        };

        return NewChannelMessage;

      })(_Message);
      return NewChannelMessage;
    }
  ]);

  angular.module('WebChat').factory('_Message', function() {
    var Message;
    Message = (function() {

      function _Class(type) {
        this.type = type;
      }

      _Class.prototype.serialize = function(data) {
        var message;
        message = {
          type: this.type,
          data: data
        };
        return message;
      };

      return _Class;

    })();
    return Message;
  });

  angular.module('WebChat').factory('_InviteGroupMessage', [
    '_Message', function(_Message) {
      var InviteGroupMessage;
      InviteGroupMessage = (function(_super) {

        __extends(InviteGroupMessage, _super);

        function InviteGroupMessage(groupId, channelId, value) {
          this.groupId = groupId;
          this.channelId = channelId;
          this.value = value;
          InviteGroupMessage.__super__.constructor.call(this, 'invitegroup');
        }

        InviteGroupMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.channelId,
            groups: this.groupId,
            value: this.value
          };
          return InviteGroupMessage.__super__.serialize.call(this, data);
        };

        return InviteGroupMessage;

      })(_Message);
      return InviteGroupMessage;
    }
  ]);

  angular.module('WebChat').factory('_JoinMessage', [
    '_Message', function(_Message) {
      var JoinMessage;
      JoinMessage = (function(_super) {

        __extends(JoinMessage, _super);

        function JoinMessage(id) {
          this.id = id;
          JoinMessage.__super__.constructor.call(this, 'join');
        }

        JoinMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.id
          };
          return JoinMessage.__super__.serialize.call(this, data);
        };

        return JoinMessage;

      })(_Message);
      return JoinMessage;
    }
  ]);

  angular.module('WebChat').factory('_ReadonlyGroupMessage', [
    '_Message', function(_Message) {
      var ReadonlyGroupMessage;
      ReadonlyGroupMessage = (function(_super) {

        __extends(ReadonlyGroupMessage, _super);

        function ReadonlyGroupMessage(groupId, channelId, value) {
          this.groupId = groupId;
          this.channelId = channelId;
          this.value = value;
          ReadonlyGroupMessage.__super__.constructor.call(this, 'readonlygroup');
        }

        ReadonlyGroupMessage.prototype.serialize = function() {
          var data;
          data = {
            channel_id: this.channelId,
            user_id: this.groupId,
            value: this.value
          };
          return ReadonlyGroupMessage.__super__.serialize.call(this, data);
        };

        return ReadonlyGroupMessage;

      })(_Message);
      return ReadonlyGroupMessage;
    }
  ]);

  angular.module('WebChat').factory('_DeleteFileMessage', [
    '_Message', function(_Message) {
      var DeleteFileMessage;
      DeleteFileMessage = (function(_super) {

        __extends(DeleteFileMessage, _super);

        function DeleteFileMessage(fileId) {
          this.fileId = fileId;
          DeleteFileMessage.__super__.constructor.call(this, 'filedelete');
        }

        DeleteFileMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.fileId
          };
          return DeleteFileMessage.__super__.serialize.call(this, data);
        };

        return DeleteFileMessage;

      })(_Message);
      return DeleteFileMessage;
    }
  ]);

  angular.module('WebChat').factory('_ModGroupMessage', [
    '_Message', function(_Message) {
      var ModGroupMessage;
      ModGroupMessage = (function(_super) {

        __extends(ModGroupMessage, _super);

        function ModGroupMessage(groupId, channelId, value) {
          this.groupId = groupId;
          this.channelId = channelId;
          this.value = value;
          ModGroupMessage.__super__.constructor.call(this, 'modgroup');
        }

        ModGroupMessage.prototype.serialize = function() {
          var data;
          data = {
            channel_id: this.channelId,
            user_id: this.groupId,
            value: this.value
          };
          return ModGroupMessage.__super__.serialize.call(this, data);
        };

        return ModGroupMessage;

      })(_Message);
      return ModGroupMessage;
    }
  ]);

  angular.module('WebChat').factory('_SendMessage', [
    '_Message', function(_Message) {
      var SendMessage;
      SendMessage = (function(_super) {

        __extends(SendMessage, _super);

        function SendMessage(text, messageType, channelId) {
          this.text = text;
          this.messageType = messageType;
          this.channelId = channelId;
          SendMessage.__super__.constructor.call(this, 'message');
        }

        SendMessage.prototype.serialize = function() {
          var data;
          data = {
            'message': this.text,
            'type': this.messageType,
            'channel_id': this.channelId
          };
          return SendMessage.__super__.serialize.call(this, data);
        };

        return SendMessage;

      })(_Message);
      return SendMessage;
    }
  ]);

  angular.module('WebChat').factory('_ChangeTopicMessage', [
    '_Message', function(_Message) {
      var ChangeTopicMessage;
      ChangeTopicMessage = (function(_super) {

        __extends(ChangeTopicMessage, _super);

        function ChangeTopicMessage(id, topic) {
          this.id = id;
          this.topic = topic;
          ChangeTopicMessage.__super__.constructor.call(this, 'channeltopic');
        }

        ChangeTopicMessage.prototype.serialize = function() {
          var data;
          data = {
            id: this.id,
            topic: this.topic
          };
          return ChangeTopicMessage.__super__.serialize.call(this, data);
        };

        return ChangeTopicMessage;

      })(_Message);
      return ChangeTopicMessage;
    }
  ]);

  $(document).ready(function() {});

  pingTimout = true;

  angular.module('WebChat').directive('activity', [
    '_PingMessage', 'WebChatWebSocket', 'PING_TIMEOUT', function(_PingMessage, WebChatWebSocket, PING_TIMEOUT) {
      var ping;
      ping = function() {
        var message;
        if (pingTimout) {
          pingTimout = false;
          message = new _PingMessage();
          WebChatWebSocket.sendJSON(message.serialize());
          return setTimeout(function() {
            return pingTimout = true;
          }, PING_TIMEOUT);
        }
      };
      return function(scope, elm, attr) {
        $(elm).keyup(function() {
          ping();
          return scope.$apply(attr.activity);
        });
        $(elm).mousemove(function() {
          ping();
          return scope.$apply(attr.activity);
        });
        return $(elm).click(function() {
          ping();
          return scope.$apply(attr.activity);
        });
      };
    }
  ]);

  angular.module('WebChat').directive('autoScroll', [
    'ChannelModel', 'ActiveChannel', function(ChannelModel, ActiveChannel) {
      var autoScrollDirective;
      autoScrollDirective = {
        restrict: 'A',
        link: function(scope, elm, attr) {
          var $elem, channel, stream;
          channel = ChannelModel.getItemById(ActiveChannel.getActiveChannelId());
          if (channel.autoScroll) {
            $elem = $(elm);
            if ($elem.hasClass('line')) {
              stream = $elem.parent().parent().parent();
            } else {
              stream = $elem.parent();
            }
            return stream.scrollTop(stream.prop("scrollHeight"));
          }
        }
      };
      return autoScrollDirective;
    }
  ]);

  angular.module('WebChat').directive('whenScrolled', [
    'ChannelModel', 'ActiveChannel', '_LoadMessages', 'WebChatWebSocket', 'ChannelMessageCache', function(ChannelModel, ActiveChannel, _LoadMessages, WebChatWebSocket, ChannelMessageCache) {
      return function(scope, elm, attr) {
        return elm.bind('scroll', function() {
          var channel, channelId, earliestMessage, msg, stream;
          stream = $(elm);
          channelId = ActiveChannel.getActiveChannelId();
          channel = ChannelModel.getItemById(channelId);
          if ((stream.innerHeight() + stream.scrollTop()) >= stream.prop("scrollHeight")) {
            channel.autoScroll = true;
          } else {
            channel.autoScroll = false;
            channel.scrollTop = stream.prop("scrollHeight");
          }
          if (stream.scrollTop() <= 0) {
            earliestMessage = ChannelMessageCache.getEarliestMessage(channelId);
            msg = new _LoadMessages(channelId, earliestMessage.id, earliestMessage.date);
            WebChatWebSocket.sendJSON(msg.serialize());
          }
          return scope.$apply(attr.whenScrolled);
        });
      };
    }
  ]);

  angular.module('WebChat').factory('_DialogueController', [
    '_Controller', function(_Controller) {
      var DialogueController;
      DialogueController = (function(_super) {

        __extends(DialogueController, _super);

        function DialogueController($scope, activeChannel, channelModel, _NewChannelMessage, _ChangeTopicMessage, _CloseChannelMessage, _ChangeChannelNameMessage, _EditProfileMessage, activeUser, userModel) {
          var _this = this;
          this.activeChannel = activeChannel;
          this.channelModel = channelModel;
          this.activeUser = activeUser;
          this.userModel = userModel;
          DialogueController.__super__.constructor.call(this, $scope);
          this.resetNewChannelInput($scope);
          $scope.showNewChannelDialogue = function(show) {
            return $scope.newChannelDialogue = show;
          };
          $scope.showCloseChannelDialogue = function(show) {
            return $scope.closeChannelDialogue = show;
          };
          $scope.showChangeChannelNameDialogue = function(show) {
            return $scope.changeChannelNameDialogue = show;
          };
          $scope.showChangeTopicDialogue = function(show) {
            return $scope.changeTopicDialogue = show;
          };
          $scope.showEditProfileDialogue = function(show) {
            return $scope.editProfileDialogue = show;
          };
          $scope.getActiveChannelName = function() {
            var channel, id;
            id = _this.activeChannel.getActiveChannelId();
            channel = _this.channelModel.getItemById(id);
            return _this.returnNullIfUndefined(channel, 'name');
          };
          $scope.getActiveChannelTopic = function() {
            var channel, id;
            id = _this.activeChannel.getActiveChannelId();
            channel = _this.channelModel.getItemById(id);
            return _this.returnNullIfUndefined(channel, 'topic');
          };
          $scope.getUserName = function() {
            var user;
            user = _this.getActiveUser();
            return _this.returnNullIfUndefined(user, 'username');
          };
          $scope.getFirstName = function() {
            var user;
            user = _this.getActiveUser();
            return _this.returnNullIfUndefined(user, 'firstname');
          };
          $scope.getLastName = function() {
            var user;
            user = _this.getActiveUser();
            return _this.returnNullIfUndefined(user, 'lastname');
          };
          $scope.getEmail = function() {
            var user;
            user = _this.getActiveUser();
            return _this.returnNullIfUndefined(user, 'email');
          };
          $scope.getPassword = function() {
            return '';
          };
          $scope.createNewChannel = function(name, topic, isPublic) {
            var message;
            _this.resetNewChannelInput($scope);
            message = new _NewChannelMessage(name, topic, isPublic);
            _this.sendMessage(message);
            return $scope.showNewChannelDialogue(false);
          };
          $scope.closeChannel = function() {
            var id, message;
            id = _this.activeChannel.getActiveChannelId();
            message = new _CloseChannelMessage(id);
            _this.sendMessage(message);
            return $scope.showCloseChannelDialogue(false);
          };
          $scope.changeChannelName = function(channelName) {
            var id, message;
            if (channelName) {
              id = _this.activeChannel.getActiveChannelId();
              message = new _ChangeChannelNameMessage(id, channelName);
              _this.sendMessage(message);
            }
            return $scope.showChangeChannelNameDialogue(false);
          };
          $scope.changeChannelTopic = function(channelTopic) {
            var id, message;
            if (channelTopic) {
              id = _this.activeChannel.getActiveChannelId();
              message = new _ChangeTopicMessage(id, channelTopic);
              _this.sendMessage(message);
              $scope.channelTopic = '';
            }
            return $scope.showChangeTopicDialogue(false);
          };
          $scope.changeProfile = function(username, prename, lastname, password, email) {
            var id, message;
            id = _this.activeUser.id;
            message = new _EditProfileMessage(id, username, prename, lastname, password, email);
            _this.sendMessage(message);
            $scope.showEditProfileDialogue(false);
            return $scope.password = '';
          };
        }

        DialogueController.prototype.resetNewChannelInput = function($scope) {
          $scope.newChannelName = '';
          $scope.newChannelTopic = '';
          return $scope.newChannelPublic = false;
        };

        DialogueController.prototype.getActiveUser = function() {
          var id;
          id = this.activeUser.id;
          return this.userModel.getItemById(id);
        };

        DialogueController.prototype.returnNullIfUndefined = function(object, attribute) {
          if (object === void 0) {
            return '';
          } else {
            return object[attribute];
          }
        };

        return DialogueController;

      })(_Controller);
      return DialogueController;
    }
  ]);

  angular.module('WebChat').factory('_GroupListController', [
    '_Controller', '_InviteUserMessage', '_InviteGroupMessage', 'GroupModel', 'UserModel', function(_Controller, _InviteUserMessage, _InviteGroupMessage, GroupModel, UserModel) {
      var GroupListController;
      GroupListController = (function(_super) {

        __extends(GroupListController, _super);

        function GroupListController($scope) {
          var _this = this;
          GroupListController.__super__.constructor.call(this, $scope);
          this.groupmodel = GroupModel;
          this.usermodel = UserModel;
          $scope.getGroups = function() {
            return _this.groupmodel.getItems();
          };
          $scope.getUsers = function() {
            return _this.usermodel.getItems();
          };
          $scope.inviteUser = function(userId, value) {
            return _this.simpleChannelMessage(userId, _InviteUserMessage, value);
          };
          $scope.inviteGroup = function(groupId, value) {
            return _this.simpleChannelMessage(groupId, _InviteGroupMessage, value);
          };
        }

        return GroupListController;

      })(_Controller);
      return GroupListController;
    }
  ]);

  angular.module('WebChat').factory('_Controller', [
    '_SendMessage', 'WebChatWebSocket', 'ActiveChannel', function(_SendMessage, WebChatWebSocket, ActiveChannel) {
      var Controller;
      Controller = (function() {

        function Controller($scope) {
          var _this = this;
          this.getActiveChannelId = function() {
            return ActiveChannel.getActiveChannelId();
          };
          this.setActiveChannelId = function(id) {
            return ActiveChannel.setActiveChannelId(id);
          };
          this.simpleChannelMessage = function(id, Msg, value) {
            var activeChannelId, message;
            activeChannelId = _this.getActiveChannelId();
            if (activeChannelId !== null) {
              message = new Msg(id, activeChannelId, value);
              return _this.sendMessage(message);
            }
          };
          this.sendMessage = function(Msg) {
            return WebChatWebSocket.sendJSON(Msg.serialize());
          };
          $scope.getActiveChannelId = function() {
            return _this.getActiveChannelId();
          };
        }

        return Controller;

      })();
      return Controller;
    }
  ]);

  angular.module('WebChat').factory('_ChannelListController', [
    '_Controller', '_JoinMessage', 'ChannelModel', function(_Controller, _JoinMessage, ChannelModel) {
      var ChannelListController;
      ChannelListController = (function(_super) {

        __extends(ChannelListController, _super);

        function ChannelListController($scope) {
          var _this = this;
          ChannelListController.__super__.constructor.call(this, $scope);
          this.channelmodel = ChannelModel;
          $scope.getChannels = function() {
            return _this.channelmodel.getItems();
          };
          $scope.join = function(id) {
            var message;
            message = new _JoinMessage(id);
            _this.sendMessage(message);
            _this.setActiveChannelId(id);
            $scope.selected = id;
            return $("#input_field").focus();
          };
        }

        return ChannelListController;

      })(_Controller);
      return ChannelListController;
    }
  ]);

  angular.module('WebChat').controller('ChannelListController', [
    '$scope', '_ChannelListController', function($scope, _ChannelListController) {
      return new _ChannelListController($scope);
    }
  ]);

  angular.module('WebChat').controller('GroupListController', [
    '$scope', '_GroupListController', function($scope, _GroupListController) {
      return new _GroupListController($scope);
    }
  ]);

  angular.module('WebChat').controller('MessageController', [
    '$scope', '_MessageController', function($scope, _MessageController) {
      return new _MessageController($scope);
    }
  ]);

  angular.module('WebChat').controller('GroupsInChannelController', [
    '$scope', '_GroupsInChannelController', function($scope, _GroupsInChannelController) {
      return new _GroupsInChannelController($scope);
    }
  ]);

  angular.module('WebChat').controller('FilesInChannelController', [
    '$scope', '_FilesInChannelController', function($scope, _FilesInChannelController) {
      return new _FilesInChannelController($scope);
    }
  ]);

  angular.module('WebChat').controller('DialogueController', [
    '$scope', '_DialogueController', 'ActiveChannel', 'ChannelModel', '_NewChannelMessage', '_ChangeTopicMessage', '_CloseChannelMessage', '_ChangeChannelNameMessage', '_EditProfileMessage', 'ActiveUser', 'UserModel', function($scope, _DialogueController, ActiveChannel, ChannelModel, _NewChannelMessage, _ChangeTopicMessage, _CloseChannelMessage, _ChangeChannelNameMessage, _EditProfileMessage, ActiveUser, UserModel) {
      return new _DialogueController($scope, ActiveChannel, ChannelModel, _NewChannelMessage, _ChangeTopicMessage, _CloseChannelMessage, _ChangeChannelNameMessage, _EditProfileMessage, ActiveUser, UserModel);
    }
  ]);

  angular.module('WebChat').factory('_GroupsInChannelController', [
    '_Controller', '_ModUserMessage', '_ModGroupMessage', '_ReadonlyUserMessage', '_ReadonlyGroupMessage', '_InviteGroupMessage', '_InviteUserMessage', 'ChannelModel', 'GroupModel', 'UserModel', 'ActiveUser', function(_Controller, _ModUserMessage, _ModGroupMessage, _ReadonlyUserMessage, _ReadonlyGroupMessage, _InviteGroupMessage, _InviteUserMessage, ChannelModel, GroupModel, UserModel, ActiveUser) {
      var GroupsInChannelController;
      GroupsInChannelController = (function(_super) {

        __extends(GroupsInChannelController, _super);

        function GroupsInChannelController($scope) {
          var _this = this;
          GroupsInChannelController.__super__.constructor.call(this, $scope);
          this.channelmodel = ChannelModel;
          this.groupmodel = GroupModel;
          this.usermodel = UserModel;
          $scope.getGroups = function() {
            return _this.groupmodel.getItems();
          };
          $scope.getUsers = function() {
            return _this.usermodel.getItems();
          };
          $scope.getActiveChannel = function() {
            if (_this.getActiveChannelId() !== null) {
              return _this.channelmodel.getItemById(_this.getActiveChannelId());
            } else {
              return null;
            }
          };
          $scope.inviteUser = function(userId, value) {
            return _this.simpleChannelMessage(userId, _InviteUserMessage, value);
          };
          $scope.inviteGroup = function(groupId, value) {
            return _this.simpleChannelMessage(groupId, _InviteGroupMessage, value);
          };
          $scope.modUser = function(userId, value) {
            return _this.simpleChannelMessage(userId, _ModUserMessage, value);
          };
          $scope.modGroup = function(groupId, value) {
            return _this.simpleChannelMessage(groupId, _ModGroupMessage, value);
          };
          $scope.readonlyUser = function(userId, value) {
            return _this.simpleChannelMessage(userId, _ReadonlyUserMessage, value);
          };
          $scope.readonlyGroup = function(groupId, value) {
            return _this.simpleChannelMessage(groupId, _ReadonlyGroupMessage, value);
          };
          $scope.userIsMod = function() {
            var channel;
            channel = _this.channelmodel.getItemById(_this.getActiveChannelId());
            return channel.isUserMod(ActiveUser.id);
          };
          $scope.isMod = function(userId) {
            var channel, user;
            channel = _this.channelmodel.getItemById(_this.getActiveChannelId());
            user = _this.usermodel.getItemById(userId);
            return channel.isUserMod(user.id);
          };
          $scope.userHasVoice = function() {
            var channel;
            channel = _this.channelmodel.getItemById(_this.getActiveChannelId());
            return channel.isHasVoice(ActiveUser.id);
          };
          $scope.makeMod = function(userId) {
            var channel, message, mod;
            channel = _this.channelmodel.getItemById(_this.getActiveChannelId());
            if (channel.isUserMod(userId)) {
              mod = false;
            } else {
              mod = true;
            }
            message = new _ModUserMessage(userId, channel.id, mod);
            return _this.sendMessage(message);
          };
        }

        return GroupsInChannelController;

      })(_Controller);
      return GroupsInChannelController;
    }
  ]);

  angular.module('WebChat').factory('_MessageController', [
    '_Controller', '_SendMessage', 'GroupModel', 'UserModel', 'MessageModel', 'ChannelModel', '$filter', 'ActiveUser', function(_Controller, _SendMessage, GroupModel, UserModel, MessageModel, ChannelModel, $filter, ActiveUser) {
      var MessageController;
      MessageController = (function(_super) {

        __extends(MessageController, _super);

        function MessageController($scope) {
          var _this = this;
          MessageController.__super__.constructor.call(this, $scope);
          $("#input_field").keydown(function(e) {
            if (e.keyCode === 9) {
              _this.autoComplete($scope);
              return false;
            }
            if (e.keyCode === 13 && !e.shiftKey) {
              $("#input_send").trigger('click');
              return false;
            }
          });
          this.resetInput($scope);
          this.groupmodel = GroupModel;
          this.usermodel = UserModel;
          this.messagemodel = MessageModel;
          this.channelmodel = ChannelModel;
          $scope.getChannels = function() {
            return _this.channelmodel.getItems();
          };
          $scope.getUsers = function() {
            return _this.usermodel.getItems();
          };
          $scope.getGroups = function() {
            return _this.groupmodel.getItems();
          };
          $scope.getMessages = function() {
            return _this.messagemodel.getItems();
          };
          $scope.getUserFullName = function(userId) {
            var user;
            user = _this.usermodel.getItemById(userId);
            return user.getFullName();
          };
          $scope.sendInput = function(text, messageType, channelId) {
            var message;
            if (text !== '') {
              message = new _SendMessage(text, messageType, channelId);
              _this.sendMessage(message);
              return _this.resetInput($scope);
            }
          };
          $scope.userIsMod = function(channelId) {
            var channel;
            channel = _this.channelmodel.getItemById(channelId);
            return channel.isUserMod(ActiveUser.id);
          };
        }

        MessageController.prototype.resetInput = function($scope) {
          $scope.messageType = 'text';
          return $scope.textInput = '';
        };

        MessageController.prototype.autoComplete = function($scope) {
          var bool, channel, fullName, groupId, toAppend, toComplete, user, userId, userIds, userInGroupFilter, users, words, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
          toComplete = '';
          toAppend = '';
          if ($scope.textInput.length === 0) {
            return;
          } else {
            words = $scope.textInput.split(' ');
            toComplete = words[words.length - 1];
            if (words.length >= 2) {
              words.pop();
              toAppend = words.join(' ');
              toAppend += ' ';
            }
          }
          userIds = {};
          channel = this.channelmodel.getItemById(this.getActiveChannelId());
          users = this.usermodel.getItems();
          _ref = channel.users;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            userId = _ref[_i];
            userIds[userId] = true;
          }
          userInGroupFilter = $filter('userInGroup');
          _ref1 = channel.groups;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            groupId = _ref1[_j];
            _ref2 = userInGroupFilter(users, groupId);
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              user = _ref2[_k];
              userIds[user.id] = true;
            }
          }
          _results = [];
          for (userId in userIds) {
            bool = userIds[userId];
            user = this.usermodel.getItemById(userId);
            fullName = user.firstname + user.lastname;
            if (fullName.toLowerCase().indexOf(toComplete.toLowerCase()) === 0) {
              _results.push($scope.$apply(function() {
                return $scope.textInput = toAppend + fullName;
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        return MessageController;

      })(_Controller);
      return MessageController;
    }
  ]);

  angular.module('WebChat').factory('_FilesInChannelController', [
    '_Controller', '_DeleteFileMessage', 'FileModel', 'MimeTypes', 'ChannelModel', function(_Controller, _DeleteFileMessage, FileModel, MimeTypes, ChannelModel) {
      var FilesInChannelController;
      FilesInChannelController = (function(_super) {

        __extends(FilesInChannelController, _super);

        function FilesInChannelController($scope) {
          var _this = this;
          FilesInChannelController.__super__.constructor.call(this, $scope);
          this.filemodel = FileModel;
          this.channelmodel = ChannelModel;
          $scope.getFiles = function() {
            return _this.filemodel.getItems();
          };
          $scope.getActiveChannel = function() {
            if (_this.getActiveChannelId() !== null) {
              return _this.channelmodel.getItemById(_this.getActiveChannelId());
            } else {
              return null;
            }
          };
          $scope.getMimeTypeImage = function(fileId) {
            var css, file, mime;
            file = _this.filemodel.getItemById(fileId);
            if (file !== void 0) {
              mime = MimeTypes.getIconPath(file.mimetype);
              css = 'background-image: url("' + mime + '")';
              return css;
            }
          };
          $scope.deleteFile = function(fileId) {
            var message;
            message = new _DeleteFileMessage(fileId);
            return _this.sendMessage(message);
          };
        }

        return FilesInChannelController;

      })(_Controller);
      return FilesInChannelController;
    }
  ]);

  angular.module('WebChat').filter('userInGroup', function() {
    return function(users, groupId) {
      var result, user, userGroupId, _i, _j, _len, _len1, _ref;
      result = [];
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        _ref = user.groups;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          userGroupId = _ref[_j];
          if (userGroupId === groupId) {
            result.push(user);
          }
        }
      }
      return result;
    };
  });

  angular.module('WebChat').filter('userInChannel', function() {
    return function(users, channel) {
      var result, user, _i, _len, _ref;
      result = [];
      if (channel === void 0 || channel === null || channel.users === void 0) {
        return result;
      }
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        if (_ref = user.id, __indexOf.call(channel.users, _ref) >= 0) {
          result.push(user);
        }
      }
      return result;
    };
  });

  angular.module('WebChat').filter('fileInChannel', function() {
    return function(files, channel) {
      var file, result, _i, _len, _ref;
      result = [];
      if (channel === void 0 || channel === null || channel.files === void 0) {
        return result;
      }
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (_ref = file.id, __indexOf.call(channel.files, _ref) >= 0) {
          result.push(file);
        }
      }
      return result;
    };
  });

  angular.module('WebChat').filter('groupInChannel', function() {
    return function(groups, channel) {
      var group, result, _i, _len, _ref;
      result = [];
      if (channel === void 0 || channel === null || channel.groups === void 0) {
        return result;
      }
      for (_i = 0, _len = groups.length; _i < _len; _i++) {
        group = groups[_i];
        if (_ref = group.id, __indexOf.call(channel.groups, _ref) >= 0) {
          result.push(group);
        }
      }
      return result;
    };
  });

  angular.module('WebChat').filter('highlight', function() {
    return function(messages) {
      SyntaxHighlighter.highlight();
      return messages;
    };
  });

  angular.module('WebChat').filter('messageInChannel', function() {
    return function(messages, channelId) {
      var message, result, _i, _len;
      result = [];
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        message = messages[_i];
        if (message.channel_id === channelId) {
          result.push(message);
        }
      }
      return result;
    };
  });

  angular.module('WebChat').filter('messageInChannel', function() {
    return function(messages, channelId) {
      var message, result, _i, _len;
      result = [];
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        message = messages[_i];
        if (message.channel_id === channelId) {
          result.push(message);
        }
      }
      return result;
    };
  });

}).call(this);
