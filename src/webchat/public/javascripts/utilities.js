// Generated by CoffeeScript 1.3.3
/*
This class binds all click events and gui interactions
*/

var Utilities;

Utilities = (function() {

  function Utilities() {}

  Utilities.prototype.format_timestamp_to_date = function(timestamp) {
    var date_string, day, formatted_date, month, year;
    date_string = new Date(timestamp);
    year = date_string.getFullYear();
    month = date_string.getMonth();
    day = date_string.getDay();
    if (month < 10) {
      month = "0" + month;
    }
    if (day < 10) {
      day = "0" + day;
    }
    formatted_date = year + "-" + month + "-" + day;
    return formatted_date;
  };

  Utilities.prototype.format_timestamp_to_time = function(timestamp) {
    var date_string, formatted_time, hours, minutes, seconds;
    date_string = new Date(timestamp);
    hours = date_string.getHours();
    minutes = date_string.getMinutes();
    seconds = date_string.getSeconds();
    if (hours < 10) {
      hours = "0" + hours;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    formatted_time = hours + ":" + minutes;
    return formatted_time;
  };

  Utilities.prototype.starts_with = function(word, needle) {
    word = word.toLowerCase();
    needle = needle.toLowerCase();
    return word.indexOf(needle) === 0;
  };

  Utilities.prototype.sort_by_keys = function(dict) {
    var key, sortedKeys, sortedObj, _i, _len;
    sortedKeys = new Array();
    sortedObj = {};
    for (key in dict) {
      sortedKeys.push(key);
    }
    sortedKeys.sort();
    for (_i = 0, _len = sortedKeys.length; _i < _len; _i++) {
      key = sortedKeys[_i];
      sortedObj[key] = dict[key];
    }
    return sortedObj;
  };

  Utilities.prototype.get_dict_size = function(dict) {
    var key, size;
    size = 0;
    for (key in dict) {
      if (dict.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };

  Utilities.prototype.regex_esc = function(string) {
    return (string + '').replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
  };

  Utilities.prototype.kb_to_human_readable = function(bytes, precision) {
    var gigabyte, kilobyte, megabyte, terabyte;
    kilobyte = 1024;
    megabyte = kilobyte * 1024;
    gigabyte = megabyte * 1024;
    terabyte = gigabyte * 1024;
    if (bytes >= kilobyte && bytes < gigabyte) {
      return (bytes / kilobyte).toFixed(precision) + ' KB';
    }
    if (bytes >= megabyte && bytes < gigabyte) {
      return (bytes / megabyte).toFixed(precision) + ' MB';
    } else if (bytes >= gigabyte && bytes < terabyte) {
      return (bytes / gigabyte).toFixed(precision) + ' GB';
    } else if (bytes >= terabyte) {
      return (bytes / terabyte).toFixed(precision) + ' TB';
    } else {
      return bytes + ' B';
    }
  };

  Utilities.prototype.sugar_text = function(msg) {
    var break_line_regex, end_line_regex, img, key, middle_line_regex, new_line_regex, pic, pic_regex, pictures, smile, smileys, start_line_regex, yt_regex, _i, _len, _ref;
    msg = this.linkify_text(msg);
    smileys = new Smileys();
    _ref = smileys.get_smileys();
    for (key in _ref) {
      smile = _ref[key];
      img = '<img width="50" height="50" alt="' + key + '" src="' + smileys.get_smiley(key) + '" />';
      middle_line_regex = new RegExp("(" + this.regex_esc(key) + ")([\.\?!,;]*) ", "g");
      msg = msg.replace(middle_line_regex, " " + img + "$2 ");
      break_line_regex = new RegExp(this.regex_esc(key) + "([\.\?!,;]*)<br", "g");
      msg = msg.replace(break_line_regex, img + '$1<br');
      new_line_regex = new RegExp(this.regex_esc(key) + "([\.\?!,;]*)\\n", "g");
      msg = msg.replace(new_line_regex, img + '$1\n');
      end_line_regex = new RegExp("(.*)" + this.regex_esc(key) + "([\.\?!,;]*)$", "g");
      msg = msg.replace(end_line_regex, "$1" + img + "$2");
      start_line_regex = new RegExp("^" + this.regex_esc(key) + "([\.\?!,;]*)(.*)$", "g");
      msg = msg.replace(start_line_regex, img + "$1$2");
    }
    pictures = ["png", "jpg", "jpeg", "gif"];
    for (_i = 0, _len = pictures.length; _i < _len; _i++) {
      pic = pictures[_i];
      pic_regex = new RegExp('<a href="(.*\.' + this.regex_esc(pic) + ')">(.*)<\/a>', "gim");
      msg = msg.replace(pic_regex, '<br/><a href="$1"><img alt="$1" src="$1" /></a><br/>');
    }
    yt_regex = /<a href=".*youtube.com\/watch\?v=([0-9a-zA-Z_-]{11}).*">.*<\/a>/gi;
    msg = msg.replace(yt_regex, '<br/><iframe width="560" height="315" src="http://www.youtube.com/embed/$1" frameborder="0" allowfullscreen></iframe><br/>');
    return msg;
  };

  Utilities.prototype.linkify_text = function(msg) {
    var email_regex, pseudo_url_regex, url_regex;
    url_regex = /\b((?:https?|ftp):\/\/[a-z0-9+&@#\/%?=~_|!:,.;-]*[a-z0-9+&@#\/%=~_|-])/gi;
    pseudo_url_regex = /(^|[^\/])(www\.[\S]+(\b|$))/gi;
    email_regex = /\w+@[a-zA-Z_]+?(?:\.[a-zA-Z]{2,6})+/gi;
    msg = msg.replace(url_regex, '<a href="$1">$1</a>');
    msg = msg.replace(pseudo_url_regex, '$1<a href="http://$2">$2</a>');
    msg = msg.replace(email_regex, '<a href="mailto:$&">$&</a>');
    return msg;
  };

  return Utilities;

})();
