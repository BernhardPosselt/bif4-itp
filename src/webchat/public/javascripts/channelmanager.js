// Generated by CoffeeScript 1.3.3
/*
Manages all channel objects in the channellist
*/

var ChannelManager,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ChannelManager = (function() {

  function ChannelManager(callback_init, main_manager) {
    this.callback_init = callback_init;
    this.main_manager = main_manager;
    this.dom_channel_list = $("#channels ul");
    this.dom_group_list = $("#groups");
    this.dom_stream = $("#streams");
    this.dom_stream_sidebar_users = $("#info_sidebar #channel_users");
    this.dom_stream_sidebar_files = $("#info_sidebar #channel_files");
    this.dom_invite_users = $("#invite_window #selected_preview .users ul");
    this.dom_invite_groups = $("#invite_window #selected_preview .groups ul");
    this.dom_invite_selected_users = $("#invite_window #invite_selected .users ul");
    this.dom_invite_selected_groups = $("#invite_window #invite_selected .groups ul");
    this.dom_upload_iframe = $("#info_sidebar #file_info iframe");
    this.dom_edit_profile_username = $("#edit_profile_window #edit_profile_username");
    this.dom_edit_profile_email = $("#edit_profile_window #edit_profile_email");
    this.dom_edit_profile_first_name = $("#edit_profile_window #edit_profile_first_name");
    this.dom_edit_profile_last_name = $("#edit_profile_window #edit_profile_last_name");
    this.dom_reg_channel_list = {};
    this.dom_reg_stream = {};
    this.dom_reg_stream_sidebar_users = {};
    this.dom_reg_stream_sidebar_files = {};
    this.dom_reg_invite_groups = {};
    this.dom_reg_invite_users = {};
    this.channel_data = {};
    this.stream_data = {};
    this.user_data = {};
    this.group_data = {};
    this.stream_sidebar_users_data = {};
    this.stream_sidebar_files_data = {};
    this.file_data = {};
    this.active_channel = void 0;
    this.last_msg_user = {};
    this.last_msg_class = {};
    this.last_post_minute = {};
    this.loaded_channels = {};
    this.init_channels = {};
    this.scrolled_channels = {};
    this.max_shown_code_lines = 10;
    this.code_clip_height = 155;
    this.notify_audio = $("<audio>");
    this.notify_audio.attr("src", "/assets/audio/75639__jobro__attention03.ogg");
    this.mimetypes = new MimeTypes();
    this.utilities = new Utilities();
  }

  ChannelManager.prototype.init = function(channel_data) {
    this.channel_data = channel_data;
    return this.callback_init();
  };

  ChannelManager.prototype.init_ui = function() {
    var id, value, _ref, _ref1, _ref2, _ref3;
    this.dom_channel_list.empty();
    this.dom_stream.empty();
    this.dom_stream_sidebar_files.empty();
    _ref = this.channel_data;
    for (id in _ref) {
      value = _ref[id];
      this.create_dom(id, value);
    }
    _ref1 = this.user_data;
    for (id in _ref1) {
      value = _ref1[id];
      this.create_user_dom(id, value);
    }
    _ref2 = this.group_data;
    for (id in _ref2) {
      value = _ref2[id];
      this.create_group_dom(id, value);
    }
    _ref3 = this.file_data;
    for (id in _ref3) {
      value = _ref3[id];
      this.create_file_dom(id, value);
    }
    this.rewrite_user_group_dom();
    this.join_first_channel();
    this.update_profile_form();
    return this.dom_channel_list.children("li").removeClass("unread");
  };

  ChannelManager.prototype.update_profile_form = function() {
    var user;
    user = this.user_data[this.active_user];
    this.dom_edit_profile_email.val(user.email);
    this.dom_edit_profile_first_name.val(user.prename);
    this.dom_edit_profile_last_name.val(user.lastname);
    return this.dom_edit_profile_username.val(user.username);
  };

  ChannelManager.prototype.input = function(data, actions) {
    var id, method, _results;
    _results = [];
    for (id in actions) {
      method = actions[id];
      switch (method) {
        case "create":
          _results.push(this.create(id, data[id]));
          break;
        case "update":
          _results.push(this.update(id, data[id]));
          break;
        case "delete":
          _results.push(this["delete"](id));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };

  ChannelManager.prototype.create = function(id, data) {
    this.channel_data[id] = data;
    this.create_dom(id, data);
    return this.rewrite_user_group_dom();
  };

  ChannelManager.prototype.create_dom = function(id, data) {
    var change_name, channel_data, close_channel, delete_channel, files_list, files_sidebar, list_entry, stream, stream_chat, stream_field, stream_label, stream_meta, stream_name, stream_topic, stream_topic_change_link, stream_utils, users_sidebar,
      _this = this;
    channel_data = data;
    list_entry = $("<li>");
    list_entry.html(channel_data.name);
    list_entry.addClass("unread");
    list_entry.bind('click', function() {
      return _this.join_channel(id);
    });
    this.dom_reg_channel_list[id] = list_entry;
    this.dom_channel_list.append(list_entry);
    stream = $("<div>");
    stream.addClass("stream");
    stream_field = $("<div>");
    stream_field.addClass("stream_field");
    stream_label = $("<div>");
    stream_label.addClass("stream_name");
    stream_name = $("<span>");
    stream_name.html(channel_data.name);
    stream_name.addClass("name");
    stream_label.append(stream_name);
    stream_utils = $("<div>");
    stream_utils.addClass("utils");
    change_name = $("<a>");
    change_name.attr("href", "#");
    change_name.addClass("change_channel_name");
    change_name.html("Rename");
    delete_channel = $("<a>");
    delete_channel.attr("href", "#");
    delete_channel.addClass("delete_channel");
    delete_channel.html("Delete");
    stream_topic_change_link = $("<a>");
    stream_topic_change_link.html("Topic");
    stream_topic_change_link.addClass("change_topic");
    stream_topic_change_link.attr("href", "#");
    close_channel = $("<a>");
    close_channel.attr("href", "#");
    close_channel.addClass("close_channel");
    close_channel.html("Close");
    stream_utils.append(delete_channel);
    stream_utils.append(close_channel);
    stream_utils.append(change_name);
    stream_utils.append(stream_topic_change_link);
    stream_label.append(stream_utils);
    stream_meta = $("<div>");
    stream_meta.addClass("stream_meta");
    stream_meta.html("Topic: ");
    stream_topic = $("<span>");
    stream_topic.addClass("topic");
    stream_topic.html(this.utilities.linkify_text(channel_data.topic));
    stream_meta.append(stream_topic);
    stream_chat = $("<div>");
    stream_chat.addClass("stream_chat");
    stream_chat.scroll(function() {
      return _this.scrolled(id);
    });
    stream_field.append(stream_label);
    stream_field.append(stream_meta);
    stream_field.append(stream_chat);
    stream.append(stream_field);
    this.dom_reg_stream[id] = stream;
    this.dom_stream.append(stream);
    users_sidebar = $("<div>");
    users_sidebar.addClass("users");
    this.dom_reg_stream_sidebar_users[id] = users_sidebar;
    this.dom_stream_sidebar_users.append(users_sidebar);
    files_sidebar = $("<div>");
    files_sidebar.addClass("files");
    files_list = $("<ul>");
    files_sidebar.append(files_list);
    this.dom_reg_stream_sidebar_files[id] = files_sidebar;
    this.dom_stream_sidebar_files.append(files_sidebar);
    return console.log("Created channel " + channel_data.name);
  };

  ChannelManager.prototype.update = function(id, data) {
    this.channel_data[id] = data;
    return this.update_dom(id, data);
  };

  ChannelManager.prototype.update_dom = function(id, data) {
    var channel_list, stream;
    channel_list = this.dom_reg_channel_list[id];
    channel_list.html(data.name);
    stream = this.dom_reg_stream[id];
    stream.children(".stream_field").children(".stream_name").children(".name").html(data.name);
    stream.children(".stream_field").children(".stream_meta").children(".topic").html(this.utilities.linkify_text(data.topic));
    this.rewrite_files_dom(id);
    this.rewrite_user_group_dom();
    return console.log("Updated channel " + data.name);
  };

  ChannelManager.prototype["delete"] = function(id) {
    if (id === this.get_active_channel()) {
      this.join_first_channel();
    }
    delete this.channel_data[id];
    delete this.stream_data[id];
    delete this.stream_sidebar_files_data[id];
    delete this.stream_sidebar_users_data[id];
    delete this.loaded_channels[id];
    delete this.scrolled_channels[id];
    delete this.init_channels[id];
    return this.delete_dom(id);
  };

  ChannelManager.prototype.delete_dom = function(id) {
    var channel_entry, files, stream, users;
    channel_entry = this.dom_reg_channel_list[id];
    console.log("Removed channel " + channel_entry.html());
    channel_entry.remove();
    delete this.dom_reg_channel_list[id];
    stream = this.dom_reg_stream[id];
    stream.remove();
    delete this.dom_reg_stream[id];
    users = this.dom_reg_stream_sidebar_files[id];
    delete this.dom_reg_stream_sidebar_files[id];
    files = this.dom_reg_stream_sidebar_files[id];
    return delete this.dom_reg_stream_sidebar_files[id];
  };

  ChannelManager.prototype.get_active_channel = function() {
    return this.active_channel;
  };

  ChannelManager.prototype.join_first_channel = function() {
    var id, value, _ref, _results;
    console.log("joined first channel");
    if (this.utilities.get_dict_size(this.channel_data) > 0) {
      _ref = this.channel_data;
      _results = [];
      for (id in _ref) {
        value = _ref[id];
        if (value !== void 0) {
          this.join_channel(id);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      return console.log("no channel found, can not join initial channel");
    }
  };

  ChannelManager.prototype.join_channel = function(channel_id) {
    var active_channel_id, list_entry,
      _this = this;
    if (this.loaded_channels[channel_id] === void 0) {
      this.main_manager.join(channel_id);
      this.loaded_channels[channel_id] = true;
    }
    list_entry = this.dom_reg_channel_list[channel_id];
    list_entry.removeClass("unread");
    this.dom_channel_list.children(".active").removeClass("active");
    list_entry.addClass("active");
    active_channel_id = this.get_active_channel();
    if (active_channel_id === void 0) {
      this.dom_reg_stream[channel_id].fadeIn("fast");
      this.dom_reg_stream_sidebar_users[channel_id].fadeIn("fast");
      this.dom_reg_stream_sidebar_files[channel_id].fadeIn("fast");
    } else if (channel_id !== active_channel_id && this.channel_data[active_channel_id] !== void 0) {
      this.dom_reg_stream[active_channel_id].fadeOut("fast", function() {
        return _this.dom_reg_stream[channel_id].fadeIn("fast");
      });
      this.dom_reg_stream_sidebar_users[active_channel_id].fadeOut("fast", function() {
        return _this.dom_reg_stream_sidebar_users[channel_id].fadeIn("fast");
      });
      this.dom_reg_stream_sidebar_files[active_channel_id].fadeOut("fast", function() {
        return _this.dom_reg_stream_sidebar_files[channel_id].fadeIn("fast");
      });
    } else if (channel_id !== active_channel_id && this.channel_data[active_channel_id] === void 0) {
      this.dom_reg_stream[channel_id].fadeIn("fast");
      this.dom_reg_stream_sidebar_users[channel_id].fadeIn("fast");
      this.dom_reg_stream_sidebar_files[channel_id].fadeIn("fast");
    }
    this.active_channel = channel_id;
    this.dom_upload_iframe.attr("src", "/upload?channel_id=" + this.active_channel);
    return console.log("joined channel " + this.channel_data[this.active_channel].name);
  };

  ChannelManager.prototype.init_stream = function(data) {
    var id, stream_data, _results;
    _results = [];
    for (id in data) {
      stream_data = data[id];
      this.create_stream(id, stream_data);
      _results.push(this.init_channels[id] = true);
    }
    return _results;
  };

  ChannelManager.prototype.input_stream = function(data, actions) {
    var id, msg_data, _results;
    _results = [];
    for (id in data) {
      msg_data = data[id];
      _results.push(this.create_stream(id, msg_data));
    }
    return _results;
  };

  ChannelManager.prototype.create_stream = function(id, data) {
    var elem, key, value;
    if (this.loaded_channels[id]) {
      for (key in data) {
        value = data[key];
        if (!this.stream_data[id]) {
          this.stream_data[id] = {};
        }
        this.stream_data[id][key] = value;
        this.create_stream_dom(id, key, value);
      }
    }
    if (id !== this.active_channel) {
      elem = this.dom_reg_channel_list[id];
      console.log(elem);
      if (!elem.hasClass("unread")) {
        return elem.addClass("unread");
      }
    }
  };

  ChannelManager.prototype.create_stream_dom = function(channel_id, msg_id) {
    var code, code_container, current_user, data, date, date_line, date_string, date_user, highlight_string, line, list_entry, minutes, msg, stream, time_span, user, user_data, user_name, year_span;
    data = this.stream_data[channel_id][msg_id];
    stream = this.dom_reg_stream[channel_id].children(".stream_field").children(".stream_chat");
    if (this.init_channels[channel_id] && channel_id !== this.get_active_channel()) {
      list_entry = this.dom_reg_channel_list[channel_id];
      list_entry.addClass("unread");
    }
    line = $("<div>");
    line.addClass("line");
    user = $("<div>");
    user.addClass("user");
    date = $("<div>");
    date.addClass("date");
    msg = $("<div>");
    msg.addClass("message");
    if (data.type === "text") {
      current_user = this.user_data["" + this.active_user];
      highlight_string = current_user.prename + current_user.lastname;
      if (data.message.indexOf(highlight_string) !== -1) {
        line.addClass("highlight");
        this.notify(channel_id);
      }
      msg.html(this.utilities.sugar_text(data.message));
    } else {
      code_container = $("<div>");
      code_container.addClass("code_container");
      code = $("<pre>");
      code.html(data.message);
      code.addClass("brush: " + data.type);
      if (data.message.split("\n").length > this.max_shown_code_lines) {
        msg.append(this._generate_expand_code_link(code_container));
        code_container.css("height", this.code_clip_height + "px");
        code_container.css({
          "overflow-y": "hidden"
        });
      }
      code_container.append(code);
      msg.append(code_container);
      if (data.message.split("\n").length > this.max_shown_code_lines) {
        msg.append(this._generate_expand_code_link(code_container));
      }
    }
    year_span = $("<span>");
    year_span.html(this.utilities.format_timestamp_to_date(data.date));
    year_span.addClass("year");
    time_span = $("<span>");
    time_span.html(this.utilities.format_timestamp_to_time(data.date));
    time_span.addClass("time");
    date.append(year_span);
    date.append(time_span);
    user_data = this.get_user(data.user_id);
    user_name = " " + user_data.prename + " " + user_data.lastname;
    user.html(user_name);
    if (this.last_msg_user[channel_id] === void 0) {
      this.last_msg_class[channel_id] = 0;
    }
    if (this.last_msg_user[channel_id] === data.user_id) {
      msg.addClass("line" + this.last_msg_class[channel_id]);
      line.addClass("line" + this.last_msg_class[channel_id]);
      user.html("");
    } else {
      this.last_msg_class[channel_id] = (this.last_msg_class[channel_id] + 1) % 2;
      msg.addClass("line" + this.last_msg_class[channel_id]);
      line.addClass("line" + this.last_msg_class[channel_id]);
    }
    this.last_msg_user[channel_id] = data.user_id;
    date_string = new Date(data.date);
    minutes = date_string.getMinutes();
    if (this.last_post_minute[channel_id] === void 0) {
      this.last_post_minute[channel_id] = -1;
    }
    if (this.last_post_minute[channel_id] !== minutes) {
      this.last_post_minute[channel_id] = minutes;
      date_line = $("<div>");
      date_line.addClass("line");
      date_line.addClass("date_line" + this.last_msg_class[channel_id]);
      date_user = $("<div>");
      date_user.addClass("user");
      date_line.append(date_user);
      date_line.append(date);
      stream.append(date_line);
    }
    line.append(user);
    line.append(msg);
    stream.append(line);
    if (data.type !== "text") {
      SyntaxHighlighter.highlight();
    }
    if (this.scrolled_channels[channel_id] === true || this.scrolled_channels[channel_id] === void 0) {
      return this.scroll_to_bottom(channel_id);
    }
  };

  ChannelManager.prototype._generate_expand_code_link = function(code_container) {
    var show_code,
      _this = this;
    show_code = $("<a>");
    show_code.html("Expand/Contract");
    show_code.attr("href", "#");
    show_code.addClass("show_code");
    show_code.click(function() {
      if (code_container.css("height") === code_container.prop("scrollHeight") + "px") {
        return code_container.animate({
          height: _this.code_clip_height + "px"
        }, 500);
      } else {
        return code_container.animate({
          height: code_container.prop("scrollHeight") + "px"
        }, 500);
      }
    });
    return show_code;
  };

  ChannelManager.prototype.scrolled = function(channel_id) {
    var scrollBottom, stream;
    stream = this.dom_reg_stream[channel_id].children(".stream_field").children(".stream_chat");
    if (this.scrolled_channels[channel_id] === void 0) {
      this.scrolled_channels[channel_id] = true;
    }
    scrollBottom = stream.innerHeight() + stream.scrollTop();
    if (scrollBottom >= stream.prop("scrollHeight")) {
      this.scrolled_channels[channel_id] = true;
      console.log("autoscroll activated");
    } else {
      this.scrolled_channels[channel_id] = false;
      console.log("autoscroll deactivated");
    }
    return console.log("Scrolled " + scrollBottom + " of " + stream.prop("scrollHeight"));
  };

  ChannelManager.prototype.scroll_to_bottom = function(channel_id) {
    var stream;
    stream = this.dom_reg_stream[channel_id].children(".stream_field").children(".stream_chat");
    return stream.scrollTop(stream.prop("scrollHeight"));
  };

  ChannelManager.prototype.rewrite_user_group_dom = function() {
    var all_users, channel_id, channels, data, dom_users, group, group_id, groups, heading, id, invite_group_link, invite_user_link, kick_group_link, kick_user_link, name, sorted_users, user, user_entry, user_id, user_list, user_name, users, _fn, _fn1, _fn2, _fn3, _fn4, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _results,
      _this = this;
    console.log("rewriting groups and users");
    this.dom_group_list.empty();
    this.dom_stream_sidebar_users.children(".users").empty();
    sorted_users = {};
    _ref = this.user_data;
    for (id in _ref) {
      data = _ref[id];
      user_name = data.prename + " " + data.lastname;
      sorted_users[user_name] = id;
    }
    sorted_users = this.utilities.sort_by_keys(sorted_users);
    groups = {};
    all_users = new Array();
    for (name in sorted_users) {
      id = sorted_users[name];
      user = this.user_data[id];
      _ref1 = user.groups;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        group_id = _ref1[_i];
        if (groups[group_id] === void 0) {
          groups[group_id] = new Array();
        }
        groups[group_id].push(id);
      }
      all_users.push(id);
    }
    _fn = function(group_id) {
      return invite_group_link.click(function() {
        return _this.main_manager.invite_group(group_id);
      });
    };
    for (group_id in groups) {
      users = groups[group_id];
      heading = $("<h1>");
      group = this.group_data[group_id];
      heading.html(group.name);
      invite_group_link = $("<a>");
      invite_group_link.addClass("invite_group");
      invite_group_link.attr("title", "invite group " + group.name + " to current channel");
      _fn(group_id);
      heading.append(invite_group_link);
      user_list = $("<ul>");
      _fn1 = function(user_id) {
        return invite_user_link.click(function() {
          return _this.main_manager.invite_user(user_id);
        });
      };
      for (_j = 0, _len1 = users.length; _j < _len1; _j++) {
        user_id = users[_j];
        user = this.user_data[user_id];
        user_entry = $("<li>");
        user_entry.html(user.prename + " " + user.lastname);
        invite_user_link = $("<a>");
        invite_user_link.addClass("invite_user");
        invite_user_link.attr("title", "invite user " + user.prename + " " + user.lastname + " to current channel");
        _fn1(user_id);
        user_entry.append(invite_user_link);
        if (user.online === true) {
          user_entry.addClass("online");
        } else {
          user_entry.addClass("offline");
        }
        user_list.append(user_entry);
      }
      this.dom_group_list.append(heading);
      this.dom_group_list.append(user_list);
    }
    user_list = $("<ul>");
    heading = $("<h1>");
    heading.html("All users");
    _fn2 = function(user_id) {
      return invite_user_link.click(function() {
        return _this.main_manager.invite_user(user_id);
      });
    };
    for (_k = 0, _len2 = all_users.length; _k < _len2; _k++) {
      user_id = all_users[_k];
      user = this.user_data[user_id];
      user_entry = $("<li>");
      user_entry.html(user.prename + " " + user.lastname);
      invite_user_link = $("<a>");
      invite_user_link.addClass("invite_user");
      invite_user_link.attr("title", "invite user " + user.prename + " " + user.lastname + " to current channel");
      _fn2(user_id);
      user_entry.append(invite_user_link);
      if (user.online === true) {
        user_entry.addClass("online");
      } else {
        user_entry.addClass("offline");
      }
      user_list.append(user_entry);
    }
    this.dom_group_list.append(heading);
    this.dom_group_list.append(user_list);
    _ref2 = this.channel_data;
    _results = [];
    for (channel_id in _ref2) {
      channels = _ref2[channel_id];
      dom_users = this.dom_reg_stream_sidebar_users[channel_id];
      _ref3 = channels.groups;
      _fn3 = function(group_id) {
        return kick_group_link.click(function() {
          return _this.main_manager.kick_group(group_id);
        });
      };
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        group_id = _ref3[_l];
        group = this.group_data[group_id];
        heading = $("<h1>");
        heading.html(group.name);
        kick_group_link = $("<a>");
        kick_group_link.addClass("kick_group");
        kick_group_link.attr("title", "remove group " + group.name + " from channel");
        _fn3(group_id);
        heading.append(kick_group_link);
        user_list = $("<ul>");
        _ref4 = groups[group_id];
        _fn4 = function(user_id) {
          return kick_user_link.click(function() {
            return _this.main_manager.kick_user(user_id);
          });
        };
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          user_id = _ref4[_m];
          user = this.user_data[user_id];
          user_entry = $("<li>");
          user_entry.html(user.prename + " " + user.lastname);
          kick_user_link = $("<a>");
          kick_user_link.addClass("kick_user");
          kick_user_link.attr("title", "remove user " + user.prename + " " + user.lastname + " from channel");
          _fn4(user_id);
          user_entry.append(kick_user_link);
          if (user.online === true) {
            user_entry.addClass("online");
          } else {
            user_entry.addClass("offline");
          }
          user_list.append(user_entry);
        }
        dom_users.append(heading);
        dom_users.append(user_list);
      }
      heading = $("<h1>");
      heading.html("Other users");
      user_list = $("<ul>");
      _results.push((function() {
        var _fn5, _len5, _n, _ref5, _results1,
          _this = this;
        _ref5 = channels.users;
        _fn5 = function(user_id) {
          return kick_user_link.click(function() {
            return _this.main_manager.kick_user(user_id);
          });
        };
        _results1 = [];
        for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
          user_id = _ref5[_n];
          user = this.user_data[user_id];
          user_entry = $("<li>");
          user_entry.html(user.prename + " " + user.lastname);
          kick_user_link = $("<a>");
          kick_user_link.addClass("kick_user");
          kick_user_link.attr("title", "remove user " + user.prename + " " + user.lastname + " from channel");
          _fn5(user_id);
          user_entry.append(kick_user_link);
          if (user.online === true) {
            user_entry.addClass("online");
          } else {
            user_entry.addClass("offline");
          }
          user_list.append(user_entry);
          dom_users.append(heading);
          _results1.push(dom_users.append(user_list));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  ChannelManager.prototype.init_group = function(group_data) {
    this.group_data = group_data;
    return this.callback_init();
  };

  ChannelManager.prototype.input_group = function(data, actions) {
    var id, method, _results;
    _results = [];
    for (id in actions) {
      method = actions[id];
      switch (method) {
        case "create":
          _results.push(this.create_group(id, data[id]));
          break;
        case "update":
          _results.push(this.update_group(id, data[id]));
          break;
        case "delete":
          _results.push(this.delete_group(id));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };

  ChannelManager.prototype.create_group = function(id, data) {
    this.group_data[id] = data;
    this.rewrite_user_group_dom();
    return this.create_group_dom(id, data);
  };

  ChannelManager.prototype.create_group_dom = function(id, data) {
    var list_entry,
      _this = this;
    list_entry = $("<li>");
    list_entry.html(data.name);
    list_entry.click(function() {
      return _this.toggle_select_invite_group(id);
    });
    this.dom_reg_invite_groups[id] = {
      dom: list_entry,
      selected: false
    };
    return this.dom_invite_groups.append(list_entry);
  };

  ChannelManager.prototype.update_group = function(id, data) {
    this.group_data[id] = data;
    this.rewrite_user_group_dom();
    return this.update_group_dom(id, data);
  };

  ChannelManager.prototype.update_group_dom = function(id, data) {
    var list_entry;
    list_entry = this.dom_reg_invite_groups[id].dom;
    return list_entry.html(data.name);
  };

  ChannelManager.prototype.delete_group = function(id) {
    delete this.group_data[id];
    this.rewrite_user_group_dom();
    return this.delete_group_dom(id);
  };

  ChannelManager.prototype.delete_group_dom = function(id) {
    return this.dom_reg_invite_groups[id].dom.remove();
  };

  ChannelManager.prototype.toggle_select_invite_group = function(id) {
    var dom_elem, list_entry;
    list_entry = this.dom_reg_invite_groups[id];
    dom_elem = list_entry.dom;
    if (list_entry.selected) {
      list_entry.selected = false;
      dom_elem.detach();
      return this.dom_invite_groups.append(dom_elem);
    } else {
      list_entry.selected = true;
      dom_elem.detach();
      return this.dom_invite_selected_groups.append(dom_elem);
    }
  };

  ChannelManager.prototype.init_active_user = function(data) {
    this.active_user = data.id;
    return this.callback_init();
  };

  ChannelManager.prototype.init_user = function(user_data) {
    this.user_data = user_data;
    return this.callback_init();
  };

  ChannelManager.prototype.input_user = function(data, actions) {
    var id, method, _results;
    _results = [];
    for (id in actions) {
      method = actions[id];
      switch (method) {
        case "create":
          _results.push(this.create_user(id, data[id]));
          break;
        case "update":
          _results.push(this.update_user(id, data[id]));
          break;
        case "delete":
          _results.push(this.delete_user(id));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };

  ChannelManager.prototype.create_user = function(id, data) {
    this.user_data[id] = data;
    this.rewrite_user_group_dom();
    return this.create_user_dom(id, data);
  };

  ChannelManager.prototype.create_user_dom = function(id, data) {
    var list_entry,
      _this = this;
    list_entry = $("<li>");
    list_entry.html(data.prename + " " + data.lastname);
    list_entry.click(function() {
      return _this.toggle_select_invite_user(id);
    });
    this.dom_reg_invite_users[id] = {
      dom: list_entry,
      selected: false
    };
    return this.dom_invite_users.append(list_entry);
  };

  ChannelManager.prototype.update_user = function(id, data) {
    this.user_data[id] = data;
    this.rewrite_user_group_dom();
    this.update_user_dom(id, data);
    if (this.active_user !== void 0) {
      return this.update_profile_form();
    }
  };

  ChannelManager.prototype.update_user_dom = function(id, data) {
    var list_entry;
    list_entry = this.dom_reg_invite_users[id].dom;
    return list_entry.html(data.prename + " " + data.lastname);
  };

  ChannelManager.prototype.delete_user = function(id) {
    delete this.user_data[id];
    this.rewrite_user_group_dom();
    return this.delete_user_dom(id);
  };

  ChannelManager.prototype.delete_user_dom = function(id) {
    return this.dom_reg_invite_users[id].dom.remove();
  };

  ChannelManager.prototype.get_user = function(id) {
    return this.user_data[id];
  };

  ChannelManager.prototype.toggle_select_invite_user = function(id) {
    var dom_elem, list_entry;
    list_entry = this.dom_reg_invite_users[id];
    dom_elem = list_entry.dom;
    if (list_entry.selected) {
      list_entry.selected = false;
      dom_elem.detach();
      return this.dom_invite_users.append(dom_elem);
    } else {
      list_entry.selected = true;
      dom_elem.detach();
      return this.dom_invite_selected_users.append(dom_elem);
    }
  };

  ChannelManager.prototype.init_file = function(file_data) {
    this.file_data = file_data;
  };

  ChannelManager.prototype.input_file = function(data, actions) {
    var id, method, _results;
    _results = [];
    for (id in actions) {
      method = actions[id];
      switch (method) {
        case "create":
          _results.push(this.create_file(id, data[id]));
          break;
        case "update":
          _results.push(this.update_file(id, data[id]));
          break;
        case "delete":
          _results.push(this.delete_file(id));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };

  ChannelManager.prototype.create_file = function(id, data) {
    return this.file_data[id] = data;
  };

  ChannelManager.prototype.update_file = function(id, data) {
    return this.file_data[id] = data;
  };

  ChannelManager.prototype.delete_file = function(id) {
    return delete this.file_data[id];
  };

  ChannelManager.rewrite_files = function() {
    var channel_id, data, _ref, _results;
    _ref = this.channel_data;
    _results = [];
    for (channel_id in _ref) {
      data = _ref[channel_id];
      _results.push(this.rewrite_files_dom(channel_id));
    }
    return _results;
  };

  ChannelManager.prototype.rewrite_files_dom = function(channel_id) {
    var date, date_entry, delete_file_link, file, file_id, file_name, file_size, files, files_ul, last_date, list_entry, post_date, _fn, _i, _len, _results,
      _this = this;
    files_ul = this.dom_reg_stream_sidebar_files[channel_id].children("ul");
    files_ul.empty();
    last_date = void 0;
    files = this.channel_data[channel_id].files.reverse();
    _fn = function(file_id) {
      return delete_file_link.click(function() {
        return _this.main_manager.delete_file(file_id);
      });
    };
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file_id = files[_i];
      file_id += "";
      file = this.file_data[file_id];
      post_date = this.utilities.format_timestamp_to_date(file.modified);
      if (last_date === void 0 || last_date !== post_date) {
        last_date = post_date;
        date_entry = $("<li>");
        date_entry.addClass("date_line");
        date = $("<span>");
        date.addClass("date");
        date.html(this.utilities.format_timestamp_to_date(file.modified));
        date_entry.append(date);
        files_ul.append(date_entry);
      }
      list_entry = $("<li>");
      list_entry.css("background-image", "url('" + this.mimetypes.get_mimetype_icon_path(file.type) + "')");
      file_name = $("<a>");
      file_name.addClass("name");
      file_name.html(file.name);
      file_name.attr("href", "/download/" + file_id + "/" + file.name);
      file_name.attr("target", "_blank");
      file_size = $("<span>");
      file_size.addClass("size");
      file_size.html(this.utilities.kb_to_human_readable(file.size, 2));
      list_entry.append(file_name);
      list_entry.append(file_size);
      delete_file_link = $("<a>");
      delete_file_link.addClass("delete_file");
      delete_file_link.attr("title", "delete file " + file.name);
      _fn(file_id);
      list_entry.append(delete_file_link);
      _results.push(files_ul.append(list_entry));
    }
    return _results;
  };

  ChannelManager.prototype.complete_name = function(val) {
    var bool, channel, data, group_id, groups, item, matches, name, ret, user, user_id, user_list, word, words, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    words = val.split(" ");
    if (words.length === 0) {
      return val;
    }
    word = words[words.length - 1];
    if (word.length < 2) {
      return val;
    }
    words.pop();
    channel = this.channel_data[this.get_active_channel()];
    user_list = {};
    _ref = this.user_data;
    for (user_id in _ref) {
      data = _ref[user_id];
      groups = data.groups;
      for (_i = 0, _len = groups.length; _i < _len; _i++) {
        group_id = groups[_i];
        if (_ref1 = parseInt(group_id), __indexOf.call(channel.groups, _ref1) >= 0) {
          user_list[user_id] = true;
        }
      }
      if (_ref2 = parseInt(user_id), __indexOf.call(channel.users, _ref2) >= 0) {
        user_list[user_id] = true;
      }
    }
    for (user_id in user_list) {
      bool = user_list[user_id];
      user = this.user_data[user_id];
      name = user.prename + user.lastname;
      matches = 0;
      ret = "";
      if (this.utilities.starts_with(name, word)) {
        matches += 1;
        for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
          item = words[_j];
          ret += item + " ";
        }
        ret += name;
      }
      if (matches === 1) {
        return ret;
      }
    }
    return val;
  };

  ChannelManager.prototype.reset_invite_selection = function() {
    var elems, id, _ref, _ref1, _results;
    _ref = this.dom_reg_invite_users;
    for (id in _ref) {
      elems = _ref[id];
      if (elems.selected) {
        this.toggle_select_invite_user(id);
      }
    }
    _ref1 = this.dom_reg_invite_groups;
    _results = [];
    for (id in _ref1) {
      elems = _ref1[id];
      if (elems.selected) {
        _results.push(this.toggle_select_invite_group(id));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ChannelManager.prototype.get_invite_selection = function() {
    var data, elems, groups, id, users, _ref, _ref1;
    users = [];
    groups = [];
    _ref = this.dom_reg_invite_users;
    for (id in _ref) {
      elems = _ref[id];
      if (elems.selected) {
        users.push(parseInt(id));
      }
    }
    _ref1 = this.dom_reg_invite_groups;
    for (id in _ref1) {
      elems = _ref1[id];
      if (elems.selected) {
        this.toggle_select_invite_group(id);
        groups.push(parseInt(id));
      }
    }
    data = {
      users: users,
      groups: groups
    };
    return data;
  };

  ChannelManager.prototype.notify = function(channel_id) {
    if (this.init_channels[channel_id]) {
      return this.notify_audio[0].play();
    }
  };

  return ChannelManager;

})();
